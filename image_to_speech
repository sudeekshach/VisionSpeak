import cv2
import pytesseract
from gtts import gTTS
from playsound import playsound
import os
import time
import numpy as np
from difflib import SequenceMatcher

# Set path to Tesseract executable if needed
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

# Speak text using gTTS and playsound
def speak(text):
    if not text.strip():
        return
    tts = gTTS(text)
    tts.save("speak.mp3")
    playsound("speak.mp3")
    os.remove("speak.mp3")

# Compare text similarity to avoid repetition
def is_similar(a, b, threshold=0.9):
    return SequenceMatcher(None, a, b).ratio() > threshold

# Preprocess image for better OCR accuracy
def preprocess_image(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    gray = cv2.bilateralFilter(gray, 11, 17, 17)
    gray = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C,
                                 cv2.THRESH_BINARY, 15, 10)
    return gray

# Rotate image by angle
def rotate_image(image, angle):
    h, w = image.shape[:2]
    center = (w // 2, h // 2)
    M = cv2.getRotationMatrix2D(center, angle, 1.0)
    return cv2.warpAffine(image, M, (w, h), flags=cv2.INTER_LINEAR, borderMode=cv2.BORDER_REPLICATE)

# Use Tesseract to auto-detect and correct orientation
def correct_tilt(image):
    try:
        osd = pytesseract.image_to_osd(image)
        rotation_angle = int([line.split(":")[-1].strip() for line in osd.split("\n") if "Rotate" in line][0])
        if rotation_angle != 0:
            print(f"Auto-rotating by {rotation_angle} degrees")
            return rotate_image(image, -rotation_angle)
        else:
            return image
    except Exception as e:
        print("Orientation detection failed. Proceeding without correction:", e)
        return image

# Analyze bounding boxes and guide user
def analyze_boxes(frame, boxes):
    height, width = frame.shape[:2]
    if not boxes:
        speak("I can't see any text. Please lift the page and center it in front of the camera.")
        return

    x_positions = [x for (x, y, w, h) in boxes]
    y_positions = [y for (x, y, w, h) in boxes]
    widths = [w for (x, y, w, h) in boxes]
    heights = [h for (x, y, w, h) in boxes]

    avg_width = sum(widths) / len(widths) if widths else 0
    avg_height = sum(heights) / len(heights) if heights else 0

    if avg_width < width * 0.1 or avg_height < height * 0.02:
        speak("The text is too small. Please bring the page closer to the camera.")
        return

    left_most = min(x_positions)
    right_most = max([x + w for (x, y, w, h) in boxes])
    top_most = min(y_positions)
    bottom_most = max([y + h for (x, y, w, h) in boxes])

    margin = 50
    movement_instructions = []

    if left_most < margin:
        movement_instructions.append("to the right")
    elif right_most > width - margin:
        movement_instructions.append("to the left")

    if top_most < margin:
        movement_instructions.append("down")
    elif bottom_most > height - margin:
        movement_instructions.append("up")

    if movement_instructions:
        speak("Move the page slightly " + " and ".join(movement_instructions) + ".")
    else:
        speak("Text detected. Hold the page steady.")

# Main program loop
def main():
    cap = cv2.VideoCapture(0)
    last_text = ""
    interval = 10  # seconds between readings
    last_time = 0

    print("Hands-free OCR reader with orientation correction running... Press ESC to exit.")

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Camera error.")
            break

        # Don't flip the frame
        corrected = correct_tilt(frame)
        cv2.imshow("Live View", corrected)

        current_time = time.time()
        if current_time - last_time >= interval:
            print("Processing frame...")
            processed = preprocess_image(corrected)

            # Optional: Save debug frame
            cv2.imwrite("debug_frame.jpg", processed)

            current_text = pytesseract.image_to_string(processed).strip()

            # Get OCR boxes for guidance
            data = pytesseract.image_to_data(processed, output_type=pytesseract.Output.DICT)
            boxes = []
            for i in range(len(data['text'])):
                if int(data['conf'][i]) > 60:
                    boxes.append((data['left'][i], data['top'][i], data['width'][i], data['height'][i]))

            if current_text:
                if not is_similar(current_text, last_text):
                    print("New text:\n", current_text)
                    speak(current_text)
                    last_text = current_text
                else:
                    print("Repeated text. Skipping.")
            else:
                analyze_boxes(frame, boxes)

            last_time = current_time

        if cv2.waitKey(1) == 27:  # ESC key
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()